<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ChannelDAO">




    
    <insert id="regist" parameterType="ChannelVO" useGeneratedKeys="true" keyProperty="id">
    
    	INSERT INTO channel (
		    owner_id, 
		    channel_title, 
		    channel_message
		) VALUES (
			#{ownerId}::uuid, 
			#{title}, 
			#{message}
		);
		
    </insert>
    
    
    
    
    
    <select id="getNewChannel" resultType="ChannelVO">
    
    	SELECT 
    		c.channel_id 		AS id,
    		c.channel_title 	AS title,
    		
    		c.owner_id 			AS ownerId,
    			
    		i.image_path 		AS profileImagePath,
    		i.image_extension 	AS profileImageExt
    	FROM 
    		channel AS c
    		
    	LEFT JOIN member 	AS m ON c.owner_id = m.member_id
    	LEFT JOIN image 	AS i ON m.member_profile_image = i.image_id
    		
    	ORDER BY 
    		c.created_at DESC
    		
    	LIMIT 10;
    
    </select>
    
    
    
    
    
    <insert id="setDefaultRole" parameterType="String">
    
    	INSERT INTO channel_role (
		    channel_id, 
		    authority,
		    role_flag,
		    is_default
		) VALUES 
		<if test='value != null and value != ""'>
			( #{value}::UUID,     'ADMIN',     B'1111111111111111', FALSE ), 
		    ( #{value}::UUID,     'USER',      B'0000000000111111', TRUE );
        </if>
        
        <selectKey keyProperty="value" resultType="String" order="AFTER">
            SELECT 
            	role_id 
            FROM 
            	channel_role 
            WHERE 
            	channel_id = #{value}::UUID
            	AND authority = 'ADMIN'  
        </selectKey>
        
    </insert>
    
    
    
    
    
    <insert id="giveRole" parameterType="ChannelRoleVO">
    
    	INSERT INTO member_channel_role 
    		( member_id, channel_id, role_id ) 
    	VALUES 
    		( #{memberId}::UUID, #{channelId}::UUID, #{roleId}::UUID )
    		
    </insert>
    
    
    
    
    
    <select id="getRole" parameterType="ChannelRoleVO" resultType="ChannelRoleVO" >
    
    	<if test='memberId != null
				and memberId != ""
				and channelId != null
				and channelId != "" '>
					
    	SELECT 
    		cr.authority 					AS authority,
    		cr.role_flag::bit(16)::integer 	AS roleFlag
    		
    	FROM
    		member_channel_role AS mcr
    	
    	LEFT JOIN channel_role AS cr ON mcr.role_id 	= cr.role_id
    	
    	WHERE			
			mcr.member_id 	= #{memberId}::UUID
		AND mcr.channel_id 	= #{channelId}::UUID
		
		</if>
    	
    </select>
    
    
    
    
    <select id="getDefaultRole" parameterType="String" resultType="String" >
    
    	<if test=' value != null and value != "" '>
    	
    	SELECT role_id
    	FROM channel_role
    	WHERE 
    		channel_id = #{value}::UUID
    	AND is_default = TRUE
    	
    	</if>
    
    </select>
    
    
    
    
    
    <select id="getChannelIdByCommunityId" parameterType="String" resultType="String" >
    	
    	SELECT 	channel_id 
    	FROM 	community 
    	WHERE 	
    	<if test='value != null and value != ""'>
    		community_id = #{value}::UUID
    	</if> 
    
    </select>
    
    <select id="getChannelIdByOwnerId" parameterType="String" resultType="String" >
    	
    	SELECT 	channel_id 
    	FROM 	channel 
    	WHERE 	
    	<if test='value != null and value != ""'>
    		owner_id = #{value}::UUID
    	</if> 
    
    </select>
    
    <select id="getChannelIdByMenuId" parameterType="String" resultType="String" >
    	
    	SELECT 	c.channel_id 
    	FROM 	community_menu AS cm
    	LEFT JOIN community AS c ON cm.community_id = c.community_id
    	WHERE 	
    	<if test='value != null and value != ""'>
    		cm.menu_id = #{value}::UUID
    	</if> 
    
    </select>
    
    <select id="getChannelIdByPostId" parameterType="String" resultType="String" >
    	
    	SELECT 	channel_id 
    	FROM 	community_post AS cp
    	LEFT JOIN community AS c ON cp.community_id = c.community_id
    	WHERE 	
    	<if test='value != null and value != ""'>
    		cp.post_id = #{value}::UUID
    	</if> 
    
    </select>
    
    
    
    
    
    <insert id="subscribe" parameterType="SubscribeVO">
    
    	INSERT INTO channel_subscribe (
    		subscriber_id, channel_id
    	) VALUES(
    		#{subscriberId}::UUID, #{channelId}::UUID
    	)
    
    </insert>

    <delete id="unsubscribe" parameterType="SubscribeVO">
    
    	DELETE FROM 
    		channel_subscribe
    	WHERE
    		subscriber_id = #{subscriberId}::UUID
    	AND channel_id	  = #{channelId}::UUID
    	
    </delete>
    
    <select id="isSubscribed" parameterType="SubscribeVO" resultType="Boolean">
    
    	SELECT EXISTS (
	    	SELECT * 
	    	FROM channel_subscribe
	    	WHERE
	    		subscriber_id = #{subscriberId}::UUID
	    	AND channel_id	  = #{channelId}::UUID
	    )
	    
    </select>
    


</mapper>

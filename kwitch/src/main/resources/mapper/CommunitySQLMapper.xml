<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CommunityDAO">
    
    
    
    
    
    <insert id="regist" parameterType="String">
    
    	<if test='value != null and value != ""'>
    	
    	INSERT INTO community ( channel_id ) VALUES ( #{value}::UUID );
		</if>
		
		<selectKey keyProperty="value" resultType="String" order="AFTER">
            SELECT 
            	community_id 
            FROM 
            	community 
            WHERE 
            	channel_id = #{value}::UUID
        </selectKey>
		
    </insert>
    
    
    
    
    
    
    <insert id="registMenu" parameterType="CommunityMenuVO">
    
    	<if test='communityId != null
					and communityId != ""
					and title != null
					and title != ""'>
    
    	INSERT INTO community_menu (
		    community_id,
		    menu_title
		) VALUES (
            	#{commnuityId}::UUID,
            	#{menuTitle}
		);
		
		</if>
		
    </insert>
    

    
    
    
    <insert id="registMenuList" parameterType="List" useGeneratedKeys="true" keyProperty="id">

		INSERT INTO community_menu (
			community_id,
			menu_title
		) VALUES
		<foreach collection="list" item="menu" separator=", ">
			(
				<if test='menu.communityId != null 
						and menu.communityId != "" 
						and menu.title != null 
						and menu.title != ""'>
	            	#{menu.communityId}::UUID,
	            	#{menu.title}
	        	</if>
			)
		</foreach>
	       
    </insert>
    
    
    
    
    
    <select id="getMenu" parameterType="String" resultType="CommunityMenuVO">
    	
    	<if test='value != null and value != ""'>
    	
    	SELECT
			menu_id 		AS id,
			menu_title 		AS title,
			community_id	AS communityId
		FROM
			community_menu
		WHERE
			menu_id = #{value}::UUID
		
		</if>
		
    </select>





	<select id="getMenuList" parameterType="String" resultType="CommunityMenuVO">

		SELECT
			menu_id 	AS id,
			menu_title 	AS title
		FROM
			community_menu
		WHERE
			<if test='value != null and value != ""'>
				community_id = #{value}::UUID
			</if>

	</select>





    <insert id="registPost" parameterType="CommunityPostVO" useGeneratedKeys="true" keyProperty="id">

    	INSERT INTO community_post(
		    community_id,
		    menu_id,
		    writer_id,
		    post_title,
		    post_content,
		    post_comment_block
		) VALUES (
		    #{communityId}::UUID,
		    #{menuId}::UUID,
		    #{writerId}::UUID,
		    #{title},
		    #{content},
		    #{isCommentBlock}
		);

    </insert>
    
    
    
    
    
	<insert id="registPostHistory" parameterType="CommunityPostHistoryVO">
    	
    	DO $$
		BEGIN
		    IF NOT EXISTS(
		        SELECT FROM community_post_history
		        WHERE post_id = #{postId}::UUID AND member_id = #{memberId}::UUID )
		    THEN
		        INSERT INTO community_post_history (
		            post_id,
		            member_id
		        ) VALUES (
		            #{postId}::UUID,
		            #{memberId}::UUID
		        );
		    END IF;
		END $$;     
    	
    </insert>
    
    
    
    
    
    <select id="getPostList" parameterType="String" resultType="CommunityPostVO">
    
    	<if test='value != null and value != ""'>
    	
    	SELECT
			cp.post_id 						AS id,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE cp.post_title
			END AS title,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE SUBSTR(cp.post_content, 0, 20)
			END AS content,

			cp.created_at::timestamp(0)		AS createdAt,
			cp.updated_at::timestamp(0) 	AS updatedAt,
			cp.post_view					AS nView,

			cp.writer_id 					AS writerId,
			CASE WHEN m.member_alias IS NULL OR m.member_alias = ''
				THEN m.member_name
				ELSE m.member_alias
			END AS writerAlias,
			m.member_profile_image 			AS writerProfileImage
		
		FROM 
		    community_menu AS cm
		
		LEFT JOIN community_post AS cp 	ON cm.menu_id 	= cp.menu_id
		LEFT JOIN member AS m 			ON cp.writer_id = m.member_id

		WHERE
		   	cm.menu_id = #{value}::UUID
		   	
		ORDER BY cp.created_at DESC
    
    	</if>
    
    </select>
    
    
    
    
    
    <select id="getPostListBySearch" parameterType="CommunityPostVO" resultType="CommunityPostVO">
    
    	<if test='title != null and title != ""'>
    	
    	SELECT
			cp.post_id 						AS id,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE cp.post_title
			END AS title,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE SUBSTR(cp.post_content, 0, 20)
			END AS content,

    	    cp.created_at::timestamp(0)		AS createdAt,
    	    cp.updated_at::timestamp(0) 	AS updatedAt,
    	    cp.post_view					AS nView,
		
			cp.writer_id 					AS writerId,
			
			CASE WHEN m.member_alias IS NULL OR m.member_alias = ''
		        THEN m.member_name
		        ELSE m.member_alias
		    END AS writerAlias,
		    
		    m.member_profile_image 	AS writerProfileImage,
		    
		    cm.menu_id 				AS menuId,
		    cm.menu_title 			AS menuTitle,
		    
		    co.community_id			AS communityId,
		    
		    ch.channel_id			AS channelId,
		    ch.channel_title 		AS channelTitle
		
		FROM 
		    community_post AS cp
		
		LEFT JOIN member 			AS m 	ON cp.writer_id 	= m.member_id
		LEFT JOIN community 		AS co 	ON cp.community_id 	= co.community_id
		LEFT JOIN community_menu 	AS cm 	ON cp.menu_id 		= cm.menu_id
		LEFT JOIN channel 			AS ch 	ON co.channel_id 	= ch.channel_id

		WHERE
		   	cp.post_title LIKE CONCAT('%', #{title}, '%')
		   	
		   	<if test='menuId != null and menuId != ""'>
		   	AND cp.menu_id = #{menuId}::UUID
		   	</if>
		   	
		   	<if test='communityId != null and communityId != ""'>
		   	AND cp.community_id = #{communityId}::UUID
		   	</if>
		   	
		ORDER BY cp.created_at DESC;
    
    	</if>
    
    </select>
    
    
    
    
    
	<select id="getPost" parameterType="String" resultType="CommunityPostVO">
    	
    	SELECT
		    cp.writer_id 			AS writerId,
			cp.post_view 			AS nView,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE cp.post_title
			END AS title,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE cp.post_content
			END AS content,

			cp.post_comment_block 	AS isCommentBlock,
		    cp.created_at 			AS createdAt,
		    cp.updated_at 			AS updatedAt,
		
		    CASE WHEN m.member_alias IS NULL OR m.member_alias = ''
		        THEN m.member_name
		        ELSE m.member_alias
		    END AS writerAlias,
		    m.member_profile_image 		AS writerProfileImage,
		    
		    cm.menu_id 				AS menuId,
		    cm.menu_title 			AS menuTitle,

			cp.community_id			AS communityId,

    	    ch.channel_id 			AS channelId,
			ch.channel_title 		AS channelTitle,

    	    cp.post_block			AS isBlock
		
		FROM 
		    community_post AS cp
		
		LEFT JOIN member 			AS m 	ON cp.writer_id 	= m.member_id
		LEFT JOIN community			AS co 	ON cp.community_id 	= co.community_id
		LEFT JOIN channel			AS ch 	ON co.channel_id 	= ch.channel_id
		LEFT JOIN community_menu	AS cm 	ON cp.menu_id 		= cm.menu_id
		
		WHERE
		   	<if test='value != null and value != ""'>
		   		cp.post_id = #{value}::UUID
		   	</if>
    
    </select>
    
    
    
    
    
    <update id="setPostView" parameterType="String">
    	
    	<if test='value != null and value != ""'>
    	
    	UPDATE 	community_post
    	SET 	post_view = post_view+1
    	WHERE 	post_id = #{value}::UUID
    	
    	</if>
    	
    </update>





	<update id="setPost" parameterType="CommunityPostVO">

		<if test='id != null and id != ""'>
		
		UPDATE
			community_post
		SET
			menu_id				= #{menuId}::UUID,
			post_title 			= #{title},
			post_content 		= #{content},
			post_comment_block 	= #{isCommentBlock},
			updated_at			= now()
		WHERE
			post_id = #{id}::UUID

		</if>

	</update>
	
	
	
	
	
	<update id="deletePostByAdmin" parameterType="String">
		
		<if test='value != null and value != ""'>
		
		UPDATE 	community_post
		SET  	post_block = TRUE
		WHERE 	post_id = #{id}::UUID
		
		</if>

	</update>





	<delete id="deletePost" parameterType="String">
		
		<if test='value != null and value != ""'>
		
		DELETE FROM community_post
		WHERE post_id = #{value}::UUID
		
		</if>

	</delete>





	<insert id="registHome" parameterType="CommunityMenuVO">

		<if test='communityId != null
						and communityId != ""
						and id != null
						and id != "" '>

		INSERT INTO community_home (
			menu_id,
			community_id,
			setting_flag,
			priority,
			thumb_size
		) VALUES (
			#{id}::UUID,
			#{communityId}::UUID,
			#{homeSettingFlag},
			#{homePriority},
			#{nHomeThumb}
		);
		
		</if>

	</insert>





	<insert id="registHomeList" parameterType="List">

		<foreach collection="list" item="menu" separator="; ">
			INSERT INTO community_home (
				menu_id,
				community_id,
				<if test='menu.homeSettingFlag != null'>
					setting_flag, </if>
				<if test='menu.nHomeThumb != null'>
					thumb_size, </if>
				priority
			) VALUES (
				<if test='menu.communityId != null
						and menu.communityId != ""
						and menu.id != null
						and menu.id != "" '>
					#{menu.id}::UUID,
					#{menu.communityId}::UUID,
					<if test='menu.homeSettingFlag != null'>
						#{menu.homeSettingFlag}, </if>
					<if test='menu.nHomeThumb != null'>
						#{menu.nHomeThumb}, </if>
					#{menu.homePriority}
				</if>
			)
		</foreach>

	</insert>
    
    
    
    
    
    <select id="getHomeContent" parameterType="String" resultType="CommunityPostVO">
    	
    	<if test='value != null and value != ""'>
    	
    	SELECT
			ch.menu_id 						AS menuId,

		    cp.post_id 						AS id,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE cp.post_title
			END AS title,

			CASE WHEN cp.post_block IS TRUE
			THEN '' ELSE SUBSTR(cp.post_content, 0, 20)
			END AS content,

    	    cp.created_at::timestamp(0)		AS createdAt,
    	    cp.updated_at::timestamp(0) 	AS updatedAt,
    	    cp.post_view					AS nView,

			cp.writer_id 					AS writerId,
			CASE WHEN m.member_alias IS NULL OR m.member_alias = ''
		        THEN m.member_name
		        ELSE m.member_alias
		    END AS writerAlias,
		    m.member_profile_image 			AS writerProfileImage,
			cp.post_block 					AS isBlock

		FROM
			community_home AS ch

		RIGHT	JOIN community_post 	AS cp 	ON ch.menu_id 	= cp.menu_id
		RIGHT 	JOIN community_menu 	AS cm 	ON ch.menu_id	= cm.menu_id
		LEFT 	JOIN member 			AS m 	ON cp.writer_id	= m.member_id
		
		WHERE
		   	ch.community_id = #{value}::UUID

		ORDER BY ch.priority ASC, cp.created_at DESC
		
		</if>
    	
    </select>





	<select id="getHomeMenu" parameterType="String" resultType="CommunityMenuVO">

		<if test='value != null and value != ""'>
		
		SELECT
			cm.menu_id 				AS id,
			cm.menu_title 			AS title,
			ch.priority				AS homePriority

		FROM
			community_home AS ch

		RIGHT JOIN community_menu AS cm ON ch.menu_id = cm.menu_id

		WHERE
			ch.community_id = #{value}::UUID
			
		ORDER BY ch.priority DESC
		
		</if>

	</select>
    




</mapper>